// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id            Int @id @default(autoincrement())
  name          String @db.VarChar(30)
  email         String @unique
  password      String
  avatar        String
  isVerified    Boolean @default(false)
  roleID        Int
  // column for points
  totalPoints   Int? // Optional for non-cust roles
  // column for referral
  referralCode  String? @unique  // Nullable because not all users have referal code

  // code for relation
  role          Role @relation(fields: [roleID], references: [id])
  coupons       Coupon[]
  referrals     Referral[] @relation("Referrer")
  referredBy    Referral?  @relation("ReferredBy") // Nullable because not all users have a referrer
  events        Event[]
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique
  user User[]
}

model Referral {
  id           Int      @id @default(autoincrement())
  referrerId   Int
  referredId   Int      @unique //Menambahkan @unique di sini untuk menunjukkan relasi satu-ke-satu
  points       Int      @default(10000)
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  referrer     User     @relation("Referrer", fields: [referrerId], references: [id])
  referred     User     @relation("ReferredBy", fields: [referredId], references: [id])
}

model Coupon {
  id            Int      @id @default(autoincrement())
  discount      Float @default(0.1) // 0.1 = 10%
  isUsed        Boolean @default(false)
  userId        Int
  user          User @relation(fields: [userId], references: [id])
}

model Event {
  id            Int @id @default(autoincrement())
  name          String
  createdById   Int
  price         Int
  startDate     String
  startTime     String 
  locationId    Int
  categoryId    Int
  description    String? @db.Text
  // Relation
  createdBy User @relation(fields: [createdById], references: [id])
  location      Location? @relation(fields: [locationId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
}

model Location {
  id Int @id @default(autoincrement())
  name String 
  events Event[]
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  events Event[]
}